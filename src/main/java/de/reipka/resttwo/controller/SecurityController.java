package de.reipka.resttwo.controller;

import de.reipka.resttwo.domain.User;
import de.reipka.resttwo.util.HashUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;

@RestController
public class SecurityController {

    Logger logger = LoggerFactory.getLogger(this.getClass());
    HashUtil hashUtil = new HashUtil();

    @GetMapping("get/sha")
    public String getSha() throws NoSuchAlgorithmException {

        String originalString = "MyOriginalString";

        logger.info("Original String: " + originalString);
        MessageDigest digest = MessageDigest.getInstance("SHA-256");

        byte[] encodedhash = digest.digest(originalString.getBytes(StandardCharsets.UTF_8));

        StringBuilder stringBuilder = new StringBuilder("");
        for(byte encodedByte: encodedhash){
            stringBuilder.append(encodedByte);
        }
        logger.info("Stringbuilder: " + stringBuilder);
        logger.info("HexString: " + bytesToHex(encodedhash));

        //return new ResponseEntity<String>(stringBuilder.toString(), HttpStatus.OK);
        return bytesToHex(encodedhash);
    }


    @PostMapping("post/security")
    public ResponseEntity<String> validateUserPassword(@RequestBody User input){

        // userName get user from DB
        // password get password from DB
        // salt get salt from DB

        // do this correctly with Spring-Security UserDetails - not with a simple User object
        String password = input.getPassword();

        Charset charset = StandardCharsets.UTF_8;
        // for password services use salt and slow algorythms for passwords (Security context from Spring)
        String algorythm = "SHA-256";
        byte[] salt = new byte[32];
        SecureRandom random = new SecureRandom();
        random.nextBytes(salt);

        String hash = hashUtil.createHash(password, salt, charset, algorythm);

        // only for info
        StringBuilder sb = new StringBuilder();
        for(byte b: salt){
            sb.append(b);
        }
        logger.info("\nPassword:\t\t" + password +"\nSalt:\t\t\t" + sb + "\nHash:\t\t\t" + hash);


        // get the User from DB and compare his saved hash value with
        // the hash value that is generated by his saved salt and the input password

        return new ResponseEntity<String>(hash, HttpStatus.OK);
    }







    // Available Algorythms: MD2, MD5, SHA-1, SHA-224, SHA-256, SHA-384, SHA-512
    public static String getHash(byte[] inputBytes, String algorythm){

        String hashValue = "";

        // MessageDigest is not thread-safe. One should use a new instance for every thread.
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(algorythm); // select algorythm
            messageDigest.update(inputBytes);                                   // computes the hash
            byte[] digestedBytes = messageDigest.digest();                      // finalizes the hash and calls reset()

            hashValue = bytesToHex(digestedBytes);
            System.out.println(hashValue);

        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }

        return hashValue;
    }




    private static String bytesToHex(byte[] hash) {
        StringBuilder hexString = new StringBuilder(2 * hash.length);
        for (int i = 0; i < hash.length; i++) {
            String hex = Integer.toHexString(0xff & hash[i]);
            if(hex.length() == 1) {
                hexString.append('0');
            }
            hexString.append(hex);
        }
        return hexString.toString();
    }








}
